:PROPERTIES:
:ID:       b416d0e8-13c6-4218-8762-7f26e7d0a01f
:END:
#+title: Linux

* Table of Contents :toc:
- [[#enviroment-variables][Enviroment Variables]]
  - [[#overview][Overview]]
- [[#permissions][Permissions]]
  - [[#overview-1][Overview]]
  - [[#permission-values][Permission Values]]
  - [[#checking-permissions][Checking Permissions]]
- [[#user-and-group-creation][User and Group creation]]
  - [[#users][Users]]
  - [[#groups][Groups]]
- [[#ssh][SSH]]
  - [[#ssh-1][SSH]]
  - [[#sshd][SSHD]]

* Enviroment Variables
** Overview
Environment variable are a core concept when working with linux. Youll see them tossed around and used in
a variety of locations. They can be distinguished by their unique ~$~ character at the beginning of the
variable's definition, and capitalized structure. Some of the most common you'll see used are:
  - $HOME = Where the current users' home directory is located, interchangeable with the ~ symbol
  - $PATH = The directories to consider the the users PATH.
  - $SHELL = What shell is currently in use
  - $TERM = What terminal is currently in use

These environment variables are specific to the user's current environment. Many programs take use of these for a
variety of purposed. Here are more detailed descriptions for some of those common variable I mentioned before.
*** $HOME
This variable is one of the most commonly used. It denotes where the current user's home directory is located.
For example, if I were a user named ~justinlime~ and used the following command:
#+begin_src bash
echo $HOME
#+end_src
it would most likely output something such as this:
#+begin_src 
/home/justinlime
#+end_src
Typically this wouldn't be a variable you'd want to modify. There is a shorthand for ~$HOME~ which is the ~ key.
It can be used interchangeably with $HOME. If you were to use:
#+begin_src bash
echo ~ 
#+end_src
It would have the exact same results

* Permissions
** Overview
Permissions in linux are one of three options:
*** Read
Typically symbolized as ~r~

Read permissions allow for the file to be read from. You cannot view the contents of a file
unless given this permission. In the terms of directories, you need this permission to view
the contents of it.
*** Write
Typically symbolized as ~w~

Read permissions allow for the file to be written to. You cannot write or modify the contents of a file
unless given this permission. In terms of directories, you need this permission to add files to the directory.
*** Execute
Typically symbolized as ~x~

Execute Permissions allow for the file to be executed. You cannot run/execute a file/binary/executable
unless given this permission. In terms of directories, this permission is needed in order to ~cd~ into it.
** Permission Values
As mentioned above, the permissions are typically symbolized with r, w, or x. In some cases, such as with use
with the ~chmod~ command, they are instead symbolized with numeric values.
  - 0 = No permissions
  - 1 = Execute permissions (x)
  - 2 = Write permissions (w)
  - 4 = Read permissions (r)
These values can be added together to symbolize a full set of permissions for a user/group/other. For example,
using somethings like:
#+begin_src
chmod 777 test.txt 
#+end_src
means that any user/group/other can read/write/execute the file or directory. This is because the values of
the execute permission (1), write permission (2), and read permission (4), result in ~7~. 

Each number in the context of the ~chmod~ command represents a user, group, and other's permissions respectively.
For example in the command:
#+begin_src bash
chmod 750 test.txt
#+end_src
The numbers represent:
  - 7: The permissions given for the OWNER
  - 5: The permissions given for the GROUP
  - 0: The permissions given for OTHERS

Heres a small cheat sheet:

| 7 | rwx | 
| 6 | rw- |
| 5 | r-x |
| 4 | r-- |
| 3 | -wx |
| 2 | -w- |
| 1 | --x |
| 0 | --- |

** Checking Permissions
Permissions on linux do not work like how things are on windows. In linux, every file has a permissions value.
One way of checking a file's permissions is to use the following command:
#+begin_src bash
ls -l /path/to/some/file
#+end_src
the ~-l~ is used to provide additional information compared to the normal ~ls~ command. The command provided above
will output something along the lines of:
#+begin_src 
-rw-r--r-- 1 user group 90 Dec  9 14:57 some_file_name
#+end_src
Here in this output, we can see the file's permissions given at the front ~-rw-r--r--~. The very first "-" given
in this output defines if it is a file, or a directory. Since in this output it is only listed as "-", this means
it is a file. If it displayed a ~d~ in that position, then that tells you it is a directory.

The following results from the permissions section are split into 3 group of 3.
Each group represents:
  - Owner
  - Group
  - Other
*** Owner
This signifies which user on the system owns the file. The owner of the file is shown in the same output
from above, as the ~user~. The first 3 numbers after the initial "-" in the output show what kind of permissions
the owner has. 
*** Group
This signifies which group on the system owns the file. The following 3 characters after the "Owners"
permissions are the groups permissions. 
*** Other
This signifies any other user/group not defined in the previous permission values. 
* User and Group creation
** Users
Users on linux can be created by a variety of means. On most distrubitions, you can use the ~useradd~ command
for this purpose:
#+begin_src bash
sudo useradd -m -s /bin/bash justinlime
#+end_src
The example given will create a user AND a group named ~justinlime~, using the $SHELL ~/bin/bash~.
the ~-m~ flag creates a home directory for the user, found in ~/home/justinlime~.

If you intend to use this user yourself interactively, you'll want to set a password for the user, this can be done
using:
#+begin_src bash
sudo passwd justinlime
#+end_src
If you want the user to have sudo permissions, you would want to add the user to either the ~wheel~ or the
~sudo~ group, depending on the distribution. This can be done with the ~usermod~ command as shown here:
#+begin_src bash
sudo usermod -aG wheel justinlime
#or
sudo usermod -aG sudo justinlime
#+end_src
The ~a~ flag means to append, and the ~G~ flag signifies group.

After this is done, you can switch to your newly created user with the ~su~ (switch user) command:
#+begin_src bash
su justinlime
#+end_src
** Groups
Similar to how users are created, if you just want to create a group in linux, you can use the ~groupadd~ command.
#+begin_src bash
sudo groupadd users
#+end_src
This command would create a ~users~ group, then you can add a user to the group with the ~usermod~ command:
#+begin_src bash
sudo usermod -aG users justinlime
#+end_src
* SSH
** SSH
SSH is the client side service for OpenSSH to connect to a listening SSHD. It is highly suggested to use
key files instead of basic password authentication, for the most security. Standard password authentication
can be brute-force attacked much easier than a key-file. Nowadays, the most secure key-encryption algorithm
is ~ed25519~.
*** Generate a key
To generate a key for use with SSH, you can use the following command:
#+begin_src bash
ssh-keygen -f ~/.ssh/your_keyfile_name -t ed25519
# ~ evaluates to /home/your_username in linux. Its the equivalent to $HOME
#+end_src
You will then be prompted to input a password. You can leave this empty if you don't want a password locked keyfile.
In most cases a passwordless key-file is fine, but for the most security its always better to have one.

The ~-f~ flag is used to output the key-pair to a specific directory, in this case, /home/your_username/.ssh.
The ~-t~ flag is used to specify the encryption type, as mentioned before ed25519 is the most secure as of today.
You can use ~ssh-keygen --help~ for more information on the command.

The command will generate a ~your_keyfile_name~ file, being your private key, and a ~your_keyfile_name.pub~ file,
being your public key. The public key being the one you supply to the server, and the private key being the locally
used key in order to verify against the public key listening on the server.

The private key should be locked down in terms of permissions, preferably with ~400~ permissions. (See [[#permissions][Permissions]])
This gives the owner the ability to read the file and nobody else.

*** Supply the public key to the server
For SSHD to recognize your private keyfile as valid, it needs to be setup with the public key counterpart of your
private key file (the one ending in ~.pub~). Unless configured otherwise, SSHD will search in the connecting user's
~$HOME/.ssh~ directory. For example, when connecting to a server as the ~justinlime~ user, SSHD will search
for a matching ~.pub~ file in the home directory of ~justinime~ to match the private key to, typically this would be
in ~/home/justinlime/.ssh/some_key.pub~. With that supplied to the server, you should be able to ssh into the machine
using the following command:
#+begin_src bash
ssh -i ~/path/to/your_private_key username@machine_ip
#+end_src
The ~-i~ flag tells ssh to use a ~Indentity File~ instead of a password. After using the command you will be prompted
for the key-file's password if it has one set for it.
*** SSH Config
SSH has an optional config file for ssh connections. You can pre-define hosts to connect to in this config file,
which is found in ~"/home/username/.ssh/config"~. You can add an entry in the following format:
#+begin_src bash
Host {name}
  User {username}
	Hostname {host_ip}
	PreferredAuthentications {authentication_type}
	IdentityFile {path_to_key_file}
#+end_src
A filled out example:
#+begin_src bash
Host server
  User justinlime
	Hostname 192.168.4.59
	PreferredAuthentications publickey
	IdentityFile ~/.ssh/server
#+end_src
This configuration defines an ssh connection to the host ~server~ at the IP of ~192.168.4.59~ using the
authentication type of ~publickey~ (which uses the key-files) and defines the identity file's location at
~"/home/justinlime/.ssh/server"~.

With this in place, instead of having to ssh using:
#+begin_src bash
ssh -i ~/.ssh/server justinlime@192.168.4.59
#+end_src
You could instead just type:
#+begin_src bash
ssh server
#+end_src
More information for the ssh config file can be found [[https://www.ssh.com/academy/ssh/config][Here]]

** SSHD
*** Overview
SSHD is the daemon running to listen for incoming ssh connection requests, typically on port 22 unless
configured otherwise. Depending on the linux distribution, SSHD's default settings can very, but it
is always good to verify harden SSHD before daily use. The SSHD config is typically found in:
~/etc/ssh/sshd_config~ on a linux machine.

Ensure the following setting on any new installation:
**** PermitEmptyPasswords no
This is pretty self explanatory, SSHD will deny any connection made with an empty password
**** PermitRootLogin no
Do not allow SSHD to accept connections to the root account. Denying connections to root is necessary for security,
since if someone was able to access as root they then have FULL control over the machine.
**** Protocol 2
Specifies to use version 2 of the SSH protocol. Version 2 has many improvements over version 1, especially
in terms of security.
**** ClientAliveInterval 300
Sets the server to send a ~"keep_alive"~ message to the client every 300 seconds (5 minutes). This prevents connections from
going stale. If the keep_alive message gets no response, the clients' connection is terminated.
**** Allow Users USER1 USER2
This tells SSHD which system users are allowed to connect to the server with SSH. These are space delimited, so if you had
the users ~foo~ and ~bar~ that you wanted to grant SSH access, you would add the line to your sshd_config:
#+begin_src
Allow Users foo bar
#+end_src
This makes it so that the only users allowed to SSH are the users ~foo~ and ~bar~
**** Allow Groups GROUP1 GROUP2
Identical usage to ~Allow Users~ but for groups instead of Users.
**** PasswordAuthentication no
This will deny any Password Authentication, and only allow connection to be made with the use of key-file pairs.
**** MaxAuthTries 3
Specifies the number of authentication attempts per connection. This setting in particular will terminate the connection if
the user fails to authenticate 3 times in a session.
**** ChallengeResponseAuthentication no
Typically used to prompt the client for a password when using PasswordAuthentication. Disabling it just to be on the safe side.
*** Finishing Touches
After applying your changes, youll need to restart SSHD in order for them to take affect. You make want to keep any current SSH connections you have going
just in case there was a misconfiguration, so you dont get locked out of the server.

To restart SSHD on a linux system that uses SystemD, which is the standard, you can use:
#+begin_src bash
sudo systemctl restart sshd
#+end_src
After doing so, open a new terminal windows and test your SSH connection to verify everything is working properly.

